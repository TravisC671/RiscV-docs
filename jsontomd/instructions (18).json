{
  "instructions": [
    {
      "name": "adc",
      "description": "Add with carry",
      "page": 86,
      "syntax": "addc{s} Rd, Rn, Rm\n{s} (optional) determines if the operation affects the PSTATE\nRd is the destination register where the sum is stored\nRn, Rm are the registers to be added together\n",
      "details": "This operation adds the carry bit from the PSTATE\nRd <- Rn + Rm + carry"
    },
    {
      "name": "add",
      "description": "Add",
      "page": 86,
      "syntax": "add{s} Rd, Rn, <Operand2>\n{s} (optional) determines if the operation affects the PSTATE\nRd is the destination register where the sum is stored\nRn is the register to be added to\n<Operand2> tbd",
      "details": "This operation adds two registers together, with some extra options\nRd <- Rn + Rx"
    },
    {
      "name": "adr",
      "description": "Form PC-Relative Address",
      "page": 78,
      "syntax": "adr Rd, <label>\nRd is the destination register where the 64-bit address will be stored\nis the label where the address is stored,",
      "details": "This instruction is more efficient than ldr Rx, = Label because it can calculate the 64-bit address in one or two instructions without performing memory access. Has a range of +- 1 MB (adrp has a range of +- 4 GB)\nRd <- address of label"
    },
    {
      "name": "adrp",
      "description": "Form PC-Relative Address to 4 KB Page",
      "page": 78,
      "syntax": "adr Rd, <label>\nRd is the destination register where the 64-bit address will be stored\nis the label where the address is stored,",
      "details": "adrp has a range of +-4 GB to the nearest 4 KB page (4096 bytes). The 21-bit immediate is shifted left by 12 bits and added to the PC.\n\nThe lower 12 bits of a label's address can be added to adrp to exactly address a label.\n\nrd <- page address of <label>"
    },
    {
      "name": "and",
      "description": "Bitwise AND",
      "page": 88,
      "syntax": "and{s} Rd, Rn, <Operand2>\n{s} (optional) determines if the operation affects the PSTATE\nRd is the destination register where the result is stored\nRn is the register that is anded \n<Operand2> tbd",
      "details": "Uses the bitwise AND operation between the two registers\n\nRd <- Rn AND <Operand2>"
    },
    {
      "name": "asr",
      "description": "Arithmetic shift right",
      "page": 91,
      "syntax": "asr Rd, Rn, Rm\nRd is the destination register where the result is stored\nRn is the register that the shift is performed on\nRm is the register that is used as the shift amount",
      "details": "asr shifts the bits to the right by the amount of Rm, but it keeps the sign of the original value\n\nEx.\n1011 0110 >> 2\nResult:\n1110 1101"
    },
    {
      "name": "b",
      "description": "Branch",
      "page": 70,
      "syntax": "b{<cond>} <target_label>\n<cond> (optional) the condition that if true, the program will goto the target_label the list of conditions can be found here(TBD)\n<target_label> can be any label in the current file or any label that is defined as .global(or .global) in any file that is linked",
      "details": "This puts the new address inside the PC address.\n\nThis can make conditional logic such as loop and if-then-else constructs."
    },
    {
      "name": "bic",
      "description": "Bitwise Bit Clear",
      "page": 89,
      "syntax": "bic{s} Rd, Rn, <Operand2>\nRd is the destination register\nRn is the register that has the bic applied with the register in <Operand2>",
      "details": "The bit clear operation is pretty much like a mask that only keeps the bits in <Operand2> that are set to zero. The operation looks like this\n\nEx.\nRn = 1011 0110\nop = 1111 1000 -> 0000 0111\nRd = 0000 0110\n\nRd <- Rn AND NOT(<Operand2>)"
    },
    {
      "name": "bl",
      "description": "Branch and Link",
      "page": 73,
      "syntax": "bl <target_address>\n<target_address> can be any label in the current file or any label defined as .global(or .global) within the range of +-128MB",
      "details": "Saves the address of the next instruction in link register (x30), then load PC with new address"
    },
    {
      "name": "blr",
      "description": "Branch to Register and Link",
      "page": 73,
      "syntax": "blr Xn\nXn contains the address of the next instruction",
      "details": "Saves the address of the next instruction in link register (x30), then loads PC with Xn\n\nX30 <- PC + 4\nPC <- Xn"
    },
    {
      "name": "br",
      "description": "Branch to Register",
      "page": 72,
      "syntax": "br Xn\nXn register that will be copied to the program counter (PC)",
      "details": "Copies register Xn to the program counter (PC)\n\nPC <- Xn"
    },
    {
      "name": "cbnz",
      "description": "Compare and Branch if Nonzero",
      "page": 76,
      "syntax": "cbnz Rt, <label>\nRt The register that will be tested. if nonzero, it will go to the label\n<label> can be any label in the file, must be word-aligned",
      "details": "Conditionally branches to the label if Rt is nonzero. has a range of +- 1MB\n\nif Rt != 0 then\n    PC <- label\nend if"
    },
    {
      "name": "cbz",
      "description": "Compare and Branch if Zero",
      "page": 76,
      "syntax": "cbz Rt, <label>\nRt The register that will be tested. if zero, it will go to the label\n<label> can be any label in the file, must be word-aligned",
      "details": "Conditionally branch to label if Rt is zero\n\nif Rt = 0 then\n    PC <- label\nend if"
    },
    {
      "name": "ccmn",
      "description": "Conditional Compare Negative",
      "page": 101,
      "syntax": "ccmn Rn, Rm|#<imm5>, #<nzcv>, <cond>\nRn register to be added with Rm|#<imm5> and set to PSTATE\nRm|#<imm5> either is a register or an unsigned 5-bit immediate\n#<nzcv> oa value between 0-15, representing the NZCV PSTATE flags\n<cond> condition that will be used for comparison. ",
      "details": "Test and set PSTATE flags to a negated comparison or immediate\n\nif <cond> then\n    PSTATE <- flags(Rn+Rm|imm5)\nelse\n    PSTATE <- <nzcv>\nend if"
    },
    {
      "name": "ccmp",
      "description": "Conditional Compare",
      "page": 101,
      "syntax": "ccmp Rn, Rm|#<imm5>, #<nzcv>, <cond>\nRn register to be subtracted by Rm|#<imm5>\nRm|#<imm5> either is a register or an unsigned 5-bit immediate\n#<nzcv> oa value between 0-15, representing the NZCV PSTATE flags\n<cond> condition that will be used for comparison. ",
      "details": "Test and set PSTATE to a comparison or immediate\n\nif <cond> then\n    PSTATE <- flags(Rn-Rm|imm5)\nelse\n    PSTATE <- <nzcv>\nend if"
    },
    {
      "name": "cinc",
      "description": "conditional increment",
      "page": 100,
      "syntax": "cinc Rd, Rn, <cond>\nRd is the destination register\nRn is the register that is set to Rd and may be incremented if <cond> is true\n<cond> condition that will be used for comparison. ",
      "details": "Set Rd to Rn + 1 if true or Rn if false\n\nif <cond> then\n    Rd <- Rn + 1\nelse\n    Rd <- Rn\nend if"
    },
    {
      "name": "cinv",
      "description": "Conditional Invert",
      "page": 100,
      "syntax": "cinv Rd, Rn, Rm, <cond>\nRd is the destination register\nRn is the register that is inverted then stored to Rd if <cond> is true\nRm is the register that is stored in Rd if <cond> is false\n<cond> condition that will be used for comparison. ",
      "details": "Set Rd to inverted Rn if true or Rn if false\n\nif <cond> then\n    Rd <- NOT(Rn)\nelse\n    Rd <- Rn\nend if"
    },
    {
      "name": "cls",
      "description": "Count Leading Sign Bits",
      "page": 104,
      "syntax": "cls Rd, Rn\nRd stores the result of the leading sign bits in Rn\nRn register to be operated on",
      "details": "Counts leading sign bits in Rn\nIf Rn is negative it will count the ones at the beginning, and if it's positive it will count the zeros\n\nRd <- CountLeadingSignBits(Rn)"
    },
    {
      "name": "clz",
      "description": "Count Leading Zeros",
      "page": 104,
      "syntax": "clz Rd, Rn\nRd stores the result of the leading zeros in Rn\nRn register to be operated on",
      "details": "Counts the leading zeros in Rn\n\nRd <- CountLeadingZeros(Rn)"
    },
    {
      "name": "cmn",
      "description": "Compare Negative",
      "page": 98,
      "syntax": "cmn Rn, <Operand2>\nRn Register to be compared with <Operand2>\n<Operand2> tbd",
      "details": "Compare negative and set PSTATE flags\n\nRn + operand2"
    },
    {
      "name": "cmp",
      "description": "Compare",
      "page": 98,
      "syntax": "cmp Rn, <Operand2>\nRn Register to be compared with <Operand2>\n<Operand2> tbd",
      "details": "Compare and set PSTATE flags\n\nRn - operand2"
    },
    {
      "name": "cneg",
      "description": "Conditional Negate",
      "page": 101,
      "syntax": "cneg Rd, Rn, <cond>\nRd is the destination register\nRn is the register to be stored to Rd and negated if <cond> is true\n<cond> condition that will be used for comparison. ",
      "details": "set Rd to Rn negated if <cond> is true or Rn if false\n\nIf <cond> then\n    Rd <- 1 + NOT(Rn)\nelse\n    Rd <- Rn\nend if\n\n"
    },
    {
      "name": "csel",
      "description": "Conditional Select",
      "page": 100,
      "syntax": "csel Rd, Rn, Rm, <cond>\nRd is the destination register\nRn register that will be stored in Rd if <cond> is true\nRm register that will be stored in Rd if <cond> is false",
      "details": "Set Rd to Rn if <cond> is true or Rm if <cond> is false\n\nif <cond> then\n    Rd <- Rn\nelse\n    Rd <- Rm\nend if\n"
    },
    {
      "name": "cset",
      "description": "Conditional Set",
      "page": 101,
      "syntax": "cset Rd, <cond>\nRd is the destination register\n<cond> condition that will be used for comparison.",
      "details": "Set Rd to 1 if <cond> is true or 0 if false\n\nif <cond> then\n    Rd <- 1\nelse\n    Rd <- 0\nend if"
    },
    {
      "name": "csetm",
      "description": "Conditional Set Mask",
      "page": 101,
      "syntax": "csetm Rd, <cond>\nRd is the destination register\n<cond> condition that will be used for comparison.",
      "details": "Fill Rd with ones or zeros\n\nif <cond> then\n    Rd <- 0xffffffffffffffff\nelse\n    Rd <- 0x0000000000000000\nend if"
    },
    {
      "name": "csinc",
      "description": "Conditional Select Increment",
      "page": 100,
      "syntax": "csinc Rd, Rn, Rm, <cond>\nRd is the destination register\nRn is the register that is set to Rd if <cond> is true\nRm is the register that is incremented and set to Rd if <cond> is false ",
      "details": "Set Rd to Rn if <cond> is true or Rm + 1 if <cond> is false\n\nif <cond> then\n    Rd <- Rn\nelse\n    Rd <- Rm + 1\nend if"
    },
    {
      "name": "csinv",
      "description": "Conditional Select Invert",
      "page": 100,
      "syntax": "csinv Rd, Rn, Rm, <cond>\nRd is the destination register\nRn is the register that is set to Rd if <cond> is true\nRm is the register that is inverted and set to Rd if <cond> is false ",
      "details": "Set Rd to Rn if <cond> is true or NOT(Rm) if <cond> is false\n\nif <cond> then\n    Rd <- Rn\nelse\n    Rd <- Rm + 1\nend if"
    },
    {
      "name": "csneg",
      "description": "Conditional Select Negate",
      "page": 100,
      "syntax": "csneg Rd, Rn, Rm, <cond>\nRd is the destination register\nRn is the register that is set to Rd if <cond> is true\nRm is the register that is negated and set to Rd if <cond> is false\n<cond> condition that will be used for comparison.",
      "details": "Set Rd to Rn if <cond> is true or NOT(Rm) + 1 if <cond> is false\n\nif <cond> then\n    Rd <- Rn\nelse\n    Rd <- 1 + NOT(Rm)\nend if"
    },
    {
      "name": "eon",
      "description": "Bitwise Exclusive  OR NOT",
      "page": 89,
      "syntax": "eon Rd, Rn, <Operand2>\nRd is the destination register\nRn is the register that is operated on\n<Operand2> tbd",
      "details": "Bitwise Exclusive OR NOT\n\nRd <- Rn XOR NOT(<OPERAND2>)"
    },
    {
      "name": "eor",
      "description": "Bitwise Exclusive OR",
      "page": 89,
      "syntax": "eon Rd, Rn, <Operand2>\nRd is the destination register\nRn is the register that is operated on\n<Operand2> tbd",
      "details": "Bitwise Exclusive OR (XOR)\n\nRd <- Rn XOR <Operand2>"
    },
    {
      "name": "ldp",
      "description": "Load Pair",
      "page": 68,
      "syntax": "ldp{<size>} Rt, Rt2, <addr>\n<size> is optionally sw for signed words\nRt is the first register to be stored\nRt2 is the first register to be stored\n<adr> is 7 bits Pre-indexed, Post-indexed, or Signed immediate (Signed immediate Xt range [-0x200, 0x1f8]. Wt range: [-0x100, 0xfc])",
      "details": "Load register pair from memory at addr where sizeof(Rt) is 4 for Wt registers and 8 for Xt registers\n\nRt  <- Mem[addr]\nRt2 <- Mem[addr+size(Rt)]"
    },
    {
      "name": "ldr",
      "description": "Load Register",
      "page": 65,
      "syntax": "ldr{<size>} Rd, <addr>\nRd is the destination register\n<addr> is one of the address specifiers described in (TBD)\n<size> (optional) is one of:\nb unsigned byte\nh unsigned half-word\nsb signed byte\nsh signed half-word\nsw signed word",
      "details": "Load register from memory at addr\nRd <- Mem[addr]"
    },
    {
      "name": "ldur",
      "description": "Load Register (Unscaled)",
      "page": 67,
      "syntax": "ldur{<size>} Rd, [Xn, #imm9]\nRd is the destination register\n[Xn, #imm9] The addressing mode is signed immediate with 9 bits\n<size> is optional and can be one of:\nb unsigned byte\nh unsigned half-word\nsb signed byte\nsh signed half-word\nsw signed word",
      "details": "Load register from memory at addr\n\nRd <- Mem[addr]\n\nex.\nLoad the byte from Mem[x5 + 255]. sign extend it and store the value in x4\n\nldursb x4, [x5, #255]"
    },
    {
      "name": "lsl",
      "description": "Logical Shift Left",
      "page": 91,
      "syntax": "lsl Rd, Rn, Rm\nRd is the destination register\nRn is the register to be operated on\nRm is the register that stores the shift amount",
      "details": "Shift left\n\nEx.\nshift the bits of Rn to the left by 2\nmov x2, #2\nlsl x0, x1, x2\n\nx1 = 1011 0110\nRd = 1101 1000\n\nRd <- Rn << Rm"
    },
    {
      "name": "lsr",
      "description": "Logical Shift Right",
      "page": 91,
      "syntax": "lsr Rd, Rn, Rm\nRd is the destination register\nRn is the register to be operated on\nRm is the register that stores the shift amount",
      "details": "Shift left\n\nEx.\nshift the bits of Rn to the right by 2\nmov x2, #2\nlsr x0, x1, x2\n\nx1 = 1011 0110\nRd = 0010 1101\n\nRd <- Rn >> Rm"
    },
    {
      "name": "madd",
      "description": "Multiply Add",
      "page": 92,
      "syntax": "madd Rd, Rn, Rm, Ra\nRd is the destination register\nRn is the register to be multiplied with Rm\nRm is the register to be multiplied with Rn\nRa is the register to be added with Rm*Rn",
      "details": "Multiply Rm and Rn, then adds Ra and stores the result in Rd\n\nRd <- Ra+(Rn*Rm)"
    },
    {
      "name": "mneg",
      "description": "Multiply Negate",
      "page": 92,
      "syntax": "mneg Rd, Rn, Rm\nRd is the destination register\nRn is the register to be multiplied with Rm\nRm is the register to be multiplied with Rn",
      "details": "Multiplies Rm and Rn, and then multiplies the result of -1 and stores it in Rd. mneg is an alias for msub and sets Ra to ZR\n\nRd <- -(Rn*Rm)"
    },
    {
      "name": "mov",
      "description": "Move",
      "page": 90,
      "syntax": "mov Rd|SP, Rn|SP\nRd|SP is either the destination register or stack pointer\nRn general purpose register\n\nmov Rd, #<imm16>|#<pattern>\nRd is the destination register\n#<imm16> is a 16 bit long number\n#<pattern> tbd",
      "details": "The mov instruction is an alias, chosen by the assembler, which is either orr, movz, movn, or add instructions. It facilitates choosing an immediate value or moving a register value to or from the stack pointer\n\nMove General purpose register to or from sp or two and from another general purpose register\nRd|SP <- Rd|sp\n\nMove an immediate to the destination register\nRd <- #<imm16> or #<pattern> "
    },
    {
      "name": "movk",
      "description": "Move wide with Keep",
      "page": 90,
      "syntax": "movk Rd, #<imm16>{, lsl #<shift>}\nRd is the destination register\n#<imm16> is a 16-bit value\n{, lsl #<shift>} is optional and allows you to left shift the immediate value by a specific amount for a 64-bit or 32-bit register\n64-bit: 0, 16, 32, 48\n32-bit: 0, 16",
      "details": "Any 64-bit value can be loaded with 4 movk instructions. If it is a pattern, it can be done with just one mov instruction, which is an alias for orr\n\nsets only four bits and keeps the rest of the number\n\nrd[shift + 15: shift] <- (imm16 << shift)"
    },
    {
      "name": "movn",
      "description": "Move wide with NOT",
      "page": 90,
      "syntax": "movk Rd, #<imm16>{, lsl #<shift>}\nRd is the destination register\n#<imm16> is a 16-bit value\n{, lsl #<shift>} is optional and allows you to left shift the immediate value by a specific amount for a 64-bit or 32-bit register\n64-bit: 0, 16, 32, 48\n32-bit: 0, 16",
      "details": "Sets the register to the 1's complement of the shifted immediate\n\nRd <- NOT(imm16<<shift)"
    },
    {
      "name": "movz",
      "description": "Move wide with Zero",
      "page": 90,
      "syntax": "movk Rd, #<imm16>{, lsl #<shift>}\nRd is the destination register\n#<imm16> is a 16-bit value\n{, lsl #<shift>} is optional and allows you to left shift the immediate value by a specific amount for a 64-bit or 32-bit register\n64-bit: 0, 16, 32, 48\n32-bit: 0, 16",
      "details": "Set the register to the immediate shifted\n\nRd <- imm16 << shift"
    },
    {
      "name": "mrs",
      "description": "Move Status to Register",
      "page": 105,
      "syntax": "mrs Xt, <field>\nXt is the destination register\n<field> is optional and is one of\nNZCV Condition Flags\nFAIR Interrupt Bits\nCurrentEl Current Exeption Level\nPAN Privileged Access Never(ARMv8.1 only)\nUAO User Access Override (ARMv8.2-UAO only)",
      "details": "Move from Process State\n\nXt <- PSTATE\n\nmrs x0, NZCV    //read the NZCV flags into r0\nand x0, xzr, z0 //clear the flags\nmsr NZCV, x0    // Write the flags back"
    },
    {
      "name": "msr",
      "description": "Move Register to Status",
      "page": 105,
      "syntax": "msr <field>, Xt\nXt is the register to be put in <field>\n<field> is optional and is one of\nNZCV Condition Flags\nFAIR Interrupt Bits\nCurrentEl Current Exeption Level\nPAN Privileged Access Never(ARMv8.1 only)\nUAO User Access Override (ARMv8.2-UAO only)",
      "details": "Move to Process State\n\nPSTATE <- Xt\n\nmrs x0, NZCV    //read the NZCV flags into r0\nand x0, xzr, z0 //clear the flags\nmsr NZCV, x0    // Write the flags back"
    },
    {
      "name": "msub",
      "description": "Multiply Subtract",
      "page": 92,
      "syntax": "msub Rd, Rn, Rm, Ra\nRd is the destination register\nRn is the register to be multiplied by Rm\nRm is the register to be multiplied by Rn\nRa is the register to be subtracted ",
      "details": "Multiply Rn and Rm, then subtract the result from Ra and store it in Rd\n\nRd <- Ra-(Rn*Rm)"
    },
    {
      "name": "mul",
      "description": "Multiply",
      "page": 92,
      "syntax": "mul Rd, Rn, Rm\nRd is the destination register\nRn is the register to be multiplied by Rm\nRm is the register to be multiplied by Rn",
      "details": "mul is an alias for madd and sets Ra to ZR\n\nmultiplies Rn by Rm\n\nRd <- Rn*Rm"
    },
    {
      "name": "mvn",
      "description": "bitwise NOT",
      "page": 89,
      "syntax": "mvn Rd, <Operand2>\nRd is the destination register\n<Operand2> tbd\n",
      "details": "One's complement\n\nRd <- NOT(Operand2)"
    },
    {
      "name": "neg",
      "description": "Negate",
      "page": 86,
      "syntax": "neg{s} Rd, <Operand2>\n{s} (optional) determines if the instruction affects the PSTATE\nRd is the destination register\n<Operand2> tbd",
      "details": "neg is an alias of sub where Rn is Zr\n\nRd <- -<Operand2>"
    },
    {
      "name": "ngc",
      "description": "Negate with Carry",
      "page": 86,
      "syntax": "ngc{s} Rd, Rm\n{s} (optional) determines if the instruction affects the PSTATE\nRd is the destination register\nRm is the register to be operated on",
      "details": "ngc is an aliace of sbc where Rn is substituted with ZR\n\nRd <- -Rn + carry - 1"
    },
    {
      "name": "nop",
      "description": "No Operation",
      "page": 107,
      "syntax": "nop",
      "details": "nop has no effects. Nop's can sometimes be inserted to optimize machine-specific code. Other times, they are used in computer attacks. They can even be used just to experiment with a debugger."
    },
    {
      "name": "orn",
      "description": "Bitwise OR NOT",
      "page": 89,
      "syntax": "orn Rd, Rn, <Operand2>\nRd is the destination register\nRn is the first operand in the instruction\n<Operand2> tbd",
      "details": "Or Rn with Not <Operand2>\n\nRd <- Rn OR NOT(<Operand2>)"
    },
    {
      "name": "orr",
      "description": "Bitwise Or",
      "page": 89,
      "syntax": "orr Rd, Rn, <Operand2>\nRd is the destination register\nRn is the first operand in the instruction\n<Operand2> tbd",
      "details": "Or Rn with <Operand2>\n\nRd <- Rn OR <Operand2>"
    },
    {
      "name": "ret",
      "description": "Return from Subroutine",
      "page": 72,
      "syntax": "ret {Xn}\nXn (optional) the return address, uses the procedure link register (LR), which is x30 if not specified",
      "details": "ret is only used to return from a subroutine\nCopy the link register (x30), or any other register (Xn) to the program counter (PC)\n\nPC <- x30 or PC <- Xn"
    },
    {
      "name": "ror",
      "description": "Rotate right",
      "page": 91,
      "syntax": "ror Rd, Rn, Rm\nRd is the destination register\nRn the register to be rotated\nRm the value is used as the rotate amount",
      "details": "The ror operation rotates n bits to the right. Those bits \"Wrap around and are shifted into the upper bits\n\nRd <- Rd[Rn-1:0]:Rd[sizeof(Rd)-1: rn\n\nlsl, lsr, asr, and ror are redundant because the same results can be achieved with an add or and instruction. \nAlthough the results are identical, the use of lsl, alr, lsr, and ror mnemonics is strongly encouraged because it results in code that is much easier to read, debug, and maintain"
    },
    {
      "name": "sbc",
      "description": "Subtract with Carry",
      "page": 86,
      "syntax": "sbc{s} Rd, Rn, Rm\n\n{s} (optional) determines if the instruction affects the PSTATE\nRd is the destination register\nRn is the first part of the subtraction\nRm is the second part of the subtraction",
      "details": "the carry bit comes from the PSTATE and is added to the two operands\n\nrd <- Rn - Rm + carry - 1"
    },
    {
      "name": "sdiv",
      "description": "Signed divide",
      "page": 97,
      "syntax": "sdiv Rd, Rm, Rn\nRd is the destination register\nRm is the dividend\nRn is the divisor",
      "details": "Signed integer division\n\nRd <- Rm/Rn"
    },
    {
      "name": "smaddl",
      "description": "Signed multiply add long",
      "page": 93,
      "syntax": "smaddl Xd, Wn, Wm, Xa\nXd is the destination 64-bit register\nWn is the 32-bit register multiplicand\nWm is the 32-bit register multiplier\nXa is the 64-bit register that is added to Wn * Wm",
      "details": "Takes in 32-bit input and outputs a 64-bit output\n\nXd <- Xa + signExtend(Wm)*signExtend(Wn)"
    },
    {
      "name": "smnegl",
      "description": "Signed multiply negate long",
      "page": 93,
      "syntax": "smnegl Xd, Wn, Wm\nXd is the 64-bit destination register\nWn is the 32-bit multiplicand\nWm is the 32-bit multiplier",
      "details": "Takes in 32-bit input and outputs a 64-bit output\n\nXd <- -(signExtend(Wn)*signExtend(Wm))"
    },
    {
      "name": "smulh",
      "description": "Signed multiply high ",
      "page": 95,
      "syntax": "smulh Xd, Xn, Xm\nXd is the 64-bit destination register\nXn is the 64-bit multiplicand\nXm is the 64-bit multiplier",
      "details": "Calculate the upper 64 bits of the 128 product multiplication between 2 64-bit numbers. The lower 64 bits can be obtained using the mul instruction\n\nXd <- (signExtend(Xn)*signExtend(Xm))[127:64]"
    },
    {
      "name": "smull",
      "description": "signed multiply long",
      "page": 93,
      "syntax": "smull Xd, Wn, Wm\nXd is the 64-bit destination register\nWn is the 32-bit multiplicand\nWm is the 32-bit multiplier",
      "details": "Takes in 32-bit input and outputs a 64-bit output\n\nXd <- (signExtend(Wn)*signExtend(Wm))"
    },
    {
      "name": "stp",
      "description": "Store Pair",
      "page": 68,
      "syntax": "stp{<size>} Rt, Rt2, <addr>\nRt and Rt2 are generic registers\n<addr> is 7 bits Pre-indexed, Post-indexed, or Signed immediate (Signed immediate Xt rage: [-0x200, 0x1f8]. Wt range: [-0x100, 0xfc])\n<size> (optional) sw for signed words",
      "details": "Store register pair in memory at addr\n\nmem[addr] <- Rt\nmem[addr + size(Rt)] <- Rt2"
    },
    {
      "name": "str",
      "description": "Store Register",
      "page": 65,
      "syntax": "str{<size>} Rd, <addr>\nRd is the destination register\n<addr> is one of the address specifies described in (TBD)\n<size> (optional) is one of\nb unsigned byte\nh unsigned half-word\nsb signed byte\nsh signed half-word\nsw signed word",
      "details": "Store register in memory at addr\n\nmem[addr] <- Rd"
    },
    {
      "name": "stur",
      "description": "Store Register (Unscaled)",
      "page": 67,
      "syntax": "stur{<size>} Rd, [Xn, #imm9]\nRd is the destination register\n#imm9 the addressing mode is signed immediate with 9 bits\n<size> (optional) is either\nb unsigned byte\nh unsigned half-word",
      "details": "Store register in memory at addr\n\nmem[addr] <- Rd"
    },
    {
      "name": "sub",
      "description": "Subtract",
      "page": 86,
      "syntax": "sub{s} Rd, Rn, <Operand2>\n{s} (optional) determines if the instruction affects the PSTATE\nRd is the destination register\nRn is a general register to be subtracted from\n<Operand2> tbd",
      "details": "Subtract <Operand2> from Rn\n\nRd <- Rn - Operand2"
    },
    {
      "name": "svc",
      "description": "Supervisor Call",
      "page": 106,
      "syntax": "svc <syscall_number>\n<syscall_number> is encoded in the instruction. The operating system may determine which operating system service is requested",
      "details": "In Linux, <syscall_number> should always just be zero. The system call number is passed in x8 and six other parameters can be passed in on x0-x5.\n\nOn Linux, it is generally better to make system calls by using the corresponding C library function, rather than calling them directly from assembly. This is because the C library function may perform additional work before or after making the system call. For instance, the exit library function may invoke other functions to cleanly shut down the program before it performs the exit system call."
    },
    {
      "name": "tbnz",
      "description": "Test Bit and Branch if Nonzero",
      "page": 76,
      "syntax": "tbnz Rt, #imm6, <label\nRt is the register to be tested\n#imm6 specifies which bit to test (0 to 63)\n<label> address to store in PC register, must be word aligned",
      "details": "tbnz has a range of +- 32 KB\n\nConditionally branch label if specified bit in Rt is nonzero\n\nif Rt[imm6] != 0 then\n    PC <- label\nend if"
    },
    {
      "name": "tbz",
      "description": "Test Bit and Branch if Zero",
      "page": 76,
      "syntax": "tbz Rt, #imm6, <label\nRt is the register to be tested\n#imm6 specifies which bit to test (0 to 63)\n<label> address to store in PC register, must be word aligned",
      "details": "tbz has a range of +- 32 KB\n\nConditionally branch label if specified bit in Rt is zero\n\nif Rt[imm6] = 0 then\n    PC <- label\nend if"
    },
    {
      "name": "tst",
      "description": "Test bits",
      "page": 98,
      "syntax": "tst Rn, <Operand2>\nRn is the register to be tested\n<Operand2> tbd",
      "details": "Test bits and set PSTATE\n\nRn AND <Operand2>\n\nEx.\ntst w1, 0x000000001\n\nif PSTATE Z is 0 then w1 is odd, else w1 is even"
    },
    {
      "name": "udiv",
      "description": "Unsigned divide",
      "page": 97,
      "syntax": "udiv Rd, Rm, Rn\nRd is the destination register\nRm is the dividend\nRn is the divisor",
      "details": "Unsigned integer division\n\nRd <- Rm/Rn"
    },
    {
      "name": "umaddl",
      "description": "Unsigned multiply long",
      "page": 93,
      "syntax": "umaddl Xd, Wn, Wm, Ra\nXd is a 64-bit destination register\nWn is a 32-bit register and is the multiplicand \nWm is a 32-bit register and is the multiplier\nRa is a general register and is added to the product",
      "details": "Xd <- Ra+Wn*Wm"
    },
    {
      "name": "umnegl",
      "description": "Unsigned multiply negate long",
      "page": 93,
      "syntax": "umnegl Xd, Wn, Wm\nXd is a 64-bit destination register\nWn is a 32-bit register and is the multiplicand \nWm is a 32-bit register and is the multiplier",
      "details": "Xd <- -(Wn*Wm)"
    },
    {
      "name": "umsubl",
      "description": "Unsigned multiply long",
      "page": 93,
      "syntax": "umsubl Xd, Wn, Wm, Xa\nXd is a 64-bit destination register\nWn is a 32-bit register and is the multiplicand \nWm is a 32-bit register and is the multiplier\nRa is a general register and is subtracted by the product",
      "details": "Xd <- Ra-Wn*Wm"
    },
    {
      "name": "umulh",
      "description": "Unsigned multiply high",
      "page": 95,
      "syntax": "umulh Xd, Xn, Xm\nXd is the 64-bit destination register\nXn is the 64-bit multiplicand\nXm is the 64-bit multiplier",
      "details": "Calculate the upper 64 bits of the 128 product multiplication between 2 64-bit numbers. The lower 64 bits can be obtained using the mul instruction\n\nXd <- (Xn*Xm)[127:64]"
    },
    {
      "name": "umull",
      "description": "Unsigned multiply long",
      "page": 93,
      "syntax": "umull Xd, Wn, Wm\nXd is a 64-bit destination register\nWm is a 32-bit multiplicand register\nWn is a 32-bit multiplier register",
      "details": "Xd <- Wn*Wm"
    }
  ]
}